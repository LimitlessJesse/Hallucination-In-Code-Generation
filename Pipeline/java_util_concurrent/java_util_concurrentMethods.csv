ClassName,Method,Return Type
AbstractExecutorService,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>
AbstractExecutorService,"invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> List<Future<T>>
AbstractExecutorService,invokeAny(Collection<? extends Callable<T>> tasks),<T> T
AbstractExecutorService,"invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> T
AbstractExecutorService,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>
AbstractExecutorService,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>
AbstractExecutorService,submit(Callable<T> task),<T> Future<T>
AbstractExecutorService,submit(Runnable task),Future<?>
AbstractExecutorService,"submit(Runnable task, T result)",<T> Future<T>
ArrayBlockingQueue,add(E e),boolean
ArrayBlockingQueue,clear(),void
ArrayBlockingQueue,contains(Object o),boolean
ArrayBlockingQueue,drainTo(Collection<? super E> c),int
ArrayBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int
ArrayBlockingQueue,iterator(),Iterator<E>
ArrayBlockingQueue,offer(E e),boolean
ArrayBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
ArrayBlockingQueue,peek(),E
ArrayBlockingQueue,poll(),E
ArrayBlockingQueue,"poll(long timeout, TimeUnit unit)",E
ArrayBlockingQueue,put(E e),void
ArrayBlockingQueue,remainingCapacity(),int
ArrayBlockingQueue,remove(Object o),boolean
ArrayBlockingQueue,size(),int
ArrayBlockingQueue,spliterator(),Spliterator<E>
ArrayBlockingQueue,take(),E
ArrayBlockingQueue,toArray(),Object[]
ArrayBlockingQueue,toArray(T[] a),<T> T[]
ArrayBlockingQueue,toString(),String
CompletableFuture,"acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)",CompletableFuture<Void>
CompletableFuture,allOf(CompletableFuture<?>... cfs),static CompletableFuture<Void>
CompletableFuture,anyOf(CompletableFuture<?>... cfs),static CompletableFuture<Object>
CompletableFuture,"applyToEither(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn, Executor executor)",<U> CompletableFuture<U>
CompletableFuture,cancel(boolean mayInterruptIfRunning),boolean
CompletableFuture,complete(T value),boolean
CompletableFuture,completedFuture(U value),static <U> CompletableFuture<U>
CompletableFuture,completeExceptionally(Throwable ex),boolean
CompletableFuture,"exceptionally(Function<Throwable,? extends T> fn)",CompletableFuture<T>
CompletableFuture,get(),T
CompletableFuture,"get(long timeout, TimeUnit unit)",T
CompletableFuture,getNow(T valueIfAbsent),T
CompletableFuture,getNumberOfDependents(),int
CompletableFuture,"handle(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn, Executor executor)",<U> CompletableFuture<U>
CompletableFuture,isCancelled(),boolean
CompletableFuture,isCompletedExceptionally(),boolean
CompletableFuture,isDone(),boolean
CompletableFuture,join(),T
CompletableFuture,obtrudeException(Throwable ex),void
CompletableFuture,obtrudeValue(T value),void
CompletableFuture,"runAfterBoth(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>
CompletableFuture,"runAfterEither(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>
CompletableFuture,runAsync(Runnable runnable),static CompletableFuture<Void>
CompletableFuture,"runAsync(Runnable runnable, Executor executor)",static CompletableFuture<Void>
CompletableFuture,supplyAsync(Supplier<U> supplier),static <U> CompletableFuture<U>
CompletableFuture,"supplyAsync(Supplier<U> supplier, Executor executor)",static <U> CompletableFuture<U>
CompletableFuture,thenAccept(Consumer<? super T> action),CompletableFuture<Void>
CompletableFuture,thenAcceptAsync(Consumer<? super T> action),CompletableFuture<Void>
CompletableFuture,"thenAcceptAsync(Consumer<? super T> action, Executor executor)",CompletableFuture<Void>
CompletableFuture,"thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action, Executor executor)",<U> CompletableFuture<Void>
CompletableFuture,"thenApply(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn, Executor executor)",<U> CompletableFuture<U>
CompletableFuture,"thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>"
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>"
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor)","<U,V> CompletableFuture<V>"
CompletableFuture,"thenCompose(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn, Executor executor)",<U> CompletableFuture<U>
CompletableFuture,thenRun(Runnable action),CompletableFuture<Void>
CompletableFuture,thenRunAsync(Runnable action),CompletableFuture<Void>
CompletableFuture,"thenRunAsync(Runnable action, Executor executor)",CompletableFuture<Void>
CompletableFuture,toCompletableFuture(),CompletableFuture<T>
CompletableFuture,toString(),String
CompletableFuture,"whenComplete(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action, Executor executor)",CompletableFuture<T>
ConcurrentHashMap,clear(),void
ConcurrentHashMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V
ConcurrentHashMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V
ConcurrentHashMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V
ConcurrentHashMap,contains(Object value),boolean
ConcurrentHashMap,containsKey(Object key),boolean
ConcurrentHashMap,containsValue(Object value),boolean
ConcurrentHashMap,elements(),Enumeration<V>
ConcurrentHashMap,entrySet(),"Set<Map.Entry<K,V>>"
ConcurrentHashMap,equals(Object o),boolean
ConcurrentHashMap,"forEach(BiConsumer<? super K,? super V> action)",void
ConcurrentHashMap,"forEach(long parallelismThreshold, BiConsumer<? super K,? super V> action)",void
ConcurrentHashMap,"forEach(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, Consumer<? super U> action)",<U> void
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Consumer<? super Map.Entry<K,V>> action)",void
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, Consumer<? super U> action)",<U> void
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Consumer<? super K> action)",void
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Function<? super K,? extends U> transformer, Consumer<? super U> action)",<U> void
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Consumer<? super V> action)",void
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Function<? super V,? extends U> transformer, Consumer<? super U> action)",<U> void
ConcurrentHashMap,get(Object key),V
ConcurrentHashMap,"getOrDefault(Object key, V defaultValue)",V
ConcurrentHashMap,hashCode(),int
ConcurrentHashMap,isEmpty(),boolean
ConcurrentHashMap,keys(),Enumeration<K>
ConcurrentHashMap,keySet(),"ConcurrentHashMap.KeySetView<K,V>"
ConcurrentHashMap,keySet(V mappedValue),"ConcurrentHashMap.KeySetView<K,V>"
ConcurrentHashMap,mappingCount(),long
ConcurrentHashMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V
ConcurrentHashMap,newKeySet(),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>"
ConcurrentHashMap,newKeySet(int initialCapacity),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>"
ConcurrentHashMap,"put(K key, V value)",V
ConcurrentHashMap,"putAll(Map<? extends K,? extends V> m)",void
ConcurrentHashMap,"putIfAbsent(K key, V value)",V
ConcurrentHashMap,"reduce(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)","Map.Entry<K,V>"
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U
ConcurrentHashMap,"reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction<Map.Entry<K,V>> transformer, double basis, DoubleBinaryOperator reducer)",double
ConcurrentHashMap,"reduceEntriesToInt(long parallelismThreshold, ToIntFunction<Map.Entry<K,V>> transformer, int basis, IntBinaryOperator reducer)",int
ConcurrentHashMap,"reduceEntriesToLong(long parallelismThreshold, ToLongFunction<Map.Entry<K,V>> transformer, long basis, LongBinaryOperator reducer)",long
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, BiFunction<? super K,? super K,? extends K> reducer)",K
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, Function<? super K,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U
ConcurrentHashMap,"reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction<? super K> transformer, double basis, DoubleBinaryOperator reducer)",double
ConcurrentHashMap,"reduceKeysToInt(long parallelismThreshold, ToIntFunction<? super K> transformer, int basis, IntBinaryOperator reducer)",int
ConcurrentHashMap,"reduceKeysToLong(long parallelismThreshold, ToLongFunction<? super K> transformer, long basis, LongBinaryOperator reducer)",long
ConcurrentHashMap,"reduceToDouble(long parallelismThreshold, ToDoubleBiFunction<? super K,? super V> transformer, double basis, DoubleBinaryOperator reducer)",double
ConcurrentHashMap,"reduceToInt(long parallelismThreshold, ToIntBiFunction<? super K,? super V> transformer, int basis, IntBinaryOperator reducer)",int
ConcurrentHashMap,"reduceToLong(long parallelismThreshold, ToLongBiFunction<? super K,? super V> transformer, long basis, LongBinaryOperator reducer)",long
ConcurrentHashMap,"reduceValues(long parallelismThreshold, BiFunction<? super V,? super V,? extends V> reducer)",V
ConcurrentHashMap,"reduceValues(long parallelismThreshold, Function<? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U
ConcurrentHashMap,"reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction<? super V> transformer, double basis, DoubleBinaryOperator reducer)",double
ConcurrentHashMap,"reduceValuesToInt(long parallelismThreshold, ToIntFunction<? super V> transformer, int basis, IntBinaryOperator reducer)",int
ConcurrentHashMap,"reduceValuesToLong(long parallelismThreshold, ToLongFunction<? super V> transformer, long basis, LongBinaryOperator reducer)",long
ConcurrentHashMap,remove(Object key),V
ConcurrentHashMap,"remove(Object key, Object value)",boolean
ConcurrentHashMap,"replace(K key, V value)",V
ConcurrentHashMap,"replace(K key, V oldValue, V newValue)",boolean
ConcurrentHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void
ConcurrentHashMap,"search(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> searchFunction)",<U> U
ConcurrentHashMap,"searchEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> searchFunction)",<U> U
ConcurrentHashMap,"searchKeys(long parallelismThreshold, Function<? super K,? extends U> searchFunction)",<U> U
ConcurrentHashMap,"searchValues(long parallelismThreshold, Function<? super V,? extends U> searchFunction)",<U> U
ConcurrentHashMap,size(),int
ConcurrentHashMap,toString(),String
ConcurrentHashMap,values(),Collection<V>
ConcurrentHashMap.KeySetView,add(K e),boolean
ConcurrentHashMap.KeySetView,addAll(Collection<? extends K> c),boolean
ConcurrentHashMap.KeySetView,clear(),void
ConcurrentHashMap.KeySetView,contains(Object o),boolean
ConcurrentHashMap.KeySetView,containsAll(Collection<?> c),boolean
ConcurrentHashMap.KeySetView,equals(Object o),boolean
ConcurrentHashMap.KeySetView,forEach(Consumer<? super K> action),void
ConcurrentHashMap.KeySetView,getMap(),"ConcurrentHashMap<K,V>"
ConcurrentHashMap.KeySetView,getMappedValue(),V
ConcurrentHashMap.KeySetView,hashCode(),int
ConcurrentHashMap.KeySetView,isEmpty(),boolean
ConcurrentHashMap.KeySetView,iterator(),Iterator<K>
ConcurrentHashMap.KeySetView,remove(Object o),boolean
ConcurrentHashMap.KeySetView,removeAll(Collection<?> c),boolean
ConcurrentHashMap.KeySetView,retainAll(Collection<?> c),boolean
ConcurrentHashMap.KeySetView,size(),int
ConcurrentHashMap.KeySetView,spliterator(),Spliterator<K>
ConcurrentHashMap.KeySetView,toArray(),Object[]
ConcurrentHashMap.KeySetView,toArray(T[] a),<T> T[]
ConcurrentHashMap.KeySetView,toString(),String
ConcurrentLinkedDeque,add(E e),boolean
ConcurrentLinkedDeque,addAll(Collection<? extends E> c),boolean
ConcurrentLinkedDeque,addFirst(E e),void
ConcurrentLinkedDeque,addLast(E e),void
ConcurrentLinkedDeque,clear(),void
ConcurrentLinkedDeque,contains(Object o),boolean
ConcurrentLinkedDeque,descendingIterator(),Iterator<E>
ConcurrentLinkedDeque,element(),E
ConcurrentLinkedDeque,getFirst(),E
ConcurrentLinkedDeque,getLast(),E
ConcurrentLinkedDeque,isEmpty(),boolean
ConcurrentLinkedDeque,iterator(),Iterator<E>
ConcurrentLinkedDeque,offer(E e),boolean
ConcurrentLinkedDeque,offerFirst(E e),boolean
ConcurrentLinkedDeque,offerLast(E e),boolean
ConcurrentLinkedDeque,peek(),E
ConcurrentLinkedDeque,peekFirst(),E
ConcurrentLinkedDeque,peekLast(),E
ConcurrentLinkedDeque,poll(),E
ConcurrentLinkedDeque,pollFirst(),E
ConcurrentLinkedDeque,pollLast(),E
ConcurrentLinkedDeque,pop(),E
ConcurrentLinkedDeque,push(E e),void
ConcurrentLinkedDeque,remove(),E
ConcurrentLinkedDeque,remove(Object o),boolean
ConcurrentLinkedDeque,removeFirst(),E
ConcurrentLinkedDeque,removeFirstOccurrence(Object o),boolean
ConcurrentLinkedDeque,removeLast(),E
ConcurrentLinkedDeque,removeLastOccurrence(Object o),boolean
ConcurrentLinkedDeque,size(),int
ConcurrentLinkedDeque,spliterator(),Spliterator<E>
ConcurrentLinkedDeque,toArray(),Object[]
ConcurrentLinkedDeque,toArray(T[] a),<T> T[]
ConcurrentLinkedQueue,add(E e),boolean
ConcurrentLinkedQueue,addAll(Collection<? extends E> c),boolean
ConcurrentLinkedQueue,contains(Object o),boolean
ConcurrentLinkedQueue,isEmpty(),boolean
ConcurrentLinkedQueue,iterator(),Iterator<E>
ConcurrentLinkedQueue,offer(E e),boolean
ConcurrentLinkedQueue,peek(),E
ConcurrentLinkedQueue,poll(),E
ConcurrentLinkedQueue,remove(Object o),boolean
ConcurrentLinkedQueue,size(),int
ConcurrentLinkedQueue,spliterator(),Spliterator<E>
ConcurrentLinkedQueue,toArray(),Object[]
ConcurrentLinkedQueue,toArray(T[] a),<T> T[]
ConcurrentSkipListMap,ceilingEntry(K key),"Map.Entry<K,V>"
ConcurrentSkipListMap,ceilingKey(K key),K
ConcurrentSkipListMap,clear(),void
ConcurrentSkipListMap,clone(),"ConcurrentSkipListMap<K,V>"
ConcurrentSkipListMap,comparator(),Comparator<? super K>
ConcurrentSkipListMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V
ConcurrentSkipListMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V
ConcurrentSkipListMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V
ConcurrentSkipListMap,containsKey(Object key),boolean
ConcurrentSkipListMap,containsValue(Object value),boolean
ConcurrentSkipListMap,descendingKeySet(),NavigableSet<K>
ConcurrentSkipListMap,descendingMap(),"ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,entrySet(),"Set<Map.Entry<K,V>>"
ConcurrentSkipListMap,equals(Object o),boolean
ConcurrentSkipListMap,firstEntry(),"Map.Entry<K,V>"
ConcurrentSkipListMap,firstKey(),K
ConcurrentSkipListMap,floorEntry(K key),"Map.Entry<K,V>"
ConcurrentSkipListMap,floorKey(K key),K
ConcurrentSkipListMap,"forEach(BiConsumer<? super K,? super V> action)",void
ConcurrentSkipListMap,get(Object key),V
ConcurrentSkipListMap,"getOrDefault(Object key, V defaultValue)",V
ConcurrentSkipListMap,headMap(K toKey),"ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,"headMap(K toKey, boolean inclusive)","ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,higherEntry(K key),"Map.Entry<K,V>"
ConcurrentSkipListMap,higherKey(K key),K
ConcurrentSkipListMap,isEmpty(),boolean
ConcurrentSkipListMap,keySet(),NavigableSet<K>
ConcurrentSkipListMap,lastEntry(),"Map.Entry<K,V>"
ConcurrentSkipListMap,lastKey(),K
ConcurrentSkipListMap,lowerEntry(K key),"Map.Entry<K,V>"
ConcurrentSkipListMap,lowerKey(K key),K
ConcurrentSkipListMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V
ConcurrentSkipListMap,navigableKeySet(),NavigableSet<K>
ConcurrentSkipListMap,pollFirstEntry(),"Map.Entry<K,V>"
ConcurrentSkipListMap,pollLastEntry(),"Map.Entry<K,V>"
ConcurrentSkipListMap,"put(K key, V value)",V
ConcurrentSkipListMap,"putIfAbsent(K key, V value)",V
ConcurrentSkipListMap,remove(Object key),V
ConcurrentSkipListMap,"remove(Object key, Object value)",boolean
ConcurrentSkipListMap,"replace(K key, V value)",V
ConcurrentSkipListMap,"replace(K key, V oldValue, V newValue)",boolean
ConcurrentSkipListMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void
ConcurrentSkipListMap,size(),int
ConcurrentSkipListMap,"subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)","ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,"subMap(K fromKey, K toKey)","ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,tailMap(K fromKey),"ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,"tailMap(K fromKey, boolean inclusive)","ConcurrentNavigableMap<K,V>"
ConcurrentSkipListMap,values(),Collection<V>
ConcurrentSkipListSet,add(E e),boolean
ConcurrentSkipListSet,ceiling(E e),E
ConcurrentSkipListSet,clear(),void
ConcurrentSkipListSet,clone(),ConcurrentSkipListSet<E>
ConcurrentSkipListSet,comparator(),Comparator<? super E>
ConcurrentSkipListSet,contains(Object o),boolean
ConcurrentSkipListSet,descendingIterator(),Iterator<E>
ConcurrentSkipListSet,descendingSet(),NavigableSet<E>
ConcurrentSkipListSet,equals(Object o),boolean
ConcurrentSkipListSet,first(),E
ConcurrentSkipListSet,floor(E e),E
ConcurrentSkipListSet,headSet(E toElement),NavigableSet<E>
ConcurrentSkipListSet,"headSet(E toElement, boolean inclusive)",NavigableSet<E>
ConcurrentSkipListSet,higher(E e),E
ConcurrentSkipListSet,isEmpty(),boolean
ConcurrentSkipListSet,iterator(),Iterator<E>
ConcurrentSkipListSet,last(),E
ConcurrentSkipListSet,lower(E e),E
ConcurrentSkipListSet,pollFirst(),E
ConcurrentSkipListSet,pollLast(),E
ConcurrentSkipListSet,remove(Object o),boolean
ConcurrentSkipListSet,removeAll(Collection<?> c),boolean
ConcurrentSkipListSet,size(),int
ConcurrentSkipListSet,spliterator(),Spliterator<E>
ConcurrentSkipListSet,"subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",NavigableSet<E>
ConcurrentSkipListSet,"subSet(E fromElement, E toElement)",NavigableSet<E>
ConcurrentSkipListSet,tailSet(E fromElement),NavigableSet<E>
ConcurrentSkipListSet,"tailSet(E fromElement, boolean inclusive)",NavigableSet<E>
CopyOnWriteArrayList,add(E e),boolean
CopyOnWriteArrayList,"add(int index, E element)",void
CopyOnWriteArrayList,addAll(Collection<? extends E> c),boolean
CopyOnWriteArrayList,"addAll(int index, Collection<? extends E> c)",boolean
CopyOnWriteArrayList,addAllAbsent(Collection<? extends E> c),int
CopyOnWriteArrayList,addIfAbsent(E e),boolean
CopyOnWriteArrayList,clear(),void
CopyOnWriteArrayList,clone(),Object
CopyOnWriteArrayList,contains(Object o),boolean
CopyOnWriteArrayList,containsAll(Collection<?> c),boolean
CopyOnWriteArrayList,equals(Object o),boolean
CopyOnWriteArrayList,forEach(Consumer<? super E> action),void
CopyOnWriteArrayList,get(int index),E
CopyOnWriteArrayList,hashCode(),int
CopyOnWriteArrayList,"indexOf(E e, int index)",int
CopyOnWriteArrayList,indexOf(Object o),int
CopyOnWriteArrayList,isEmpty(),boolean
CopyOnWriteArrayList,iterator(),Iterator<E>
CopyOnWriteArrayList,"lastIndexOf(E e, int index)",int
CopyOnWriteArrayList,lastIndexOf(Object o),int
CopyOnWriteArrayList,listIterator(),ListIterator<E>
CopyOnWriteArrayList,listIterator(int index),ListIterator<E>
CopyOnWriteArrayList,remove(int index),E
CopyOnWriteArrayList,remove(Object o),boolean
CopyOnWriteArrayList,removeAll(Collection<?> c),boolean
CopyOnWriteArrayList,removeIf(Predicate<? super E> filter),boolean
CopyOnWriteArrayList,replaceAll(UnaryOperator<E> operator),void
CopyOnWriteArrayList,retainAll(Collection<?> c),boolean
CopyOnWriteArrayList,"set(int index, E element)",E
CopyOnWriteArrayList,size(),int
CopyOnWriteArrayList,sort(Comparator<? super E> c),void
CopyOnWriteArrayList,spliterator(),Spliterator<E>
CopyOnWriteArrayList,"subList(int fromIndex, int toIndex)",List<E>
CopyOnWriteArrayList,toArray(),Object[]
CopyOnWriteArrayList,toArray(T[] a),<T> T[]
CopyOnWriteArrayList,toString(),String
CopyOnWriteArraySet,add(E e),boolean
CopyOnWriteArraySet,addAll(Collection<? extends E> c),boolean
CopyOnWriteArraySet,clear(),void
CopyOnWriteArraySet,contains(Object o),boolean
CopyOnWriteArraySet,containsAll(Collection<?> c),boolean
CopyOnWriteArraySet,equals(Object o),boolean
CopyOnWriteArraySet,forEach(Consumer<? super E> action),void
CopyOnWriteArraySet,isEmpty(),boolean
CopyOnWriteArraySet,iterator(),Iterator<E>
CopyOnWriteArraySet,remove(Object o),boolean
CopyOnWriteArraySet,removeAll(Collection<?> c),boolean
CopyOnWriteArraySet,removeIf(Predicate<? super E> filter),boolean
CopyOnWriteArraySet,retainAll(Collection<?> c),boolean
CopyOnWriteArraySet,size(),int
CopyOnWriteArraySet,spliterator(),Spliterator<E>
CopyOnWriteArraySet,toArray(),Object[]
CopyOnWriteArraySet,toArray(T[] a),<T> T[]
CountDownLatch,await(),void
CountDownLatch,"await(long timeout, TimeUnit unit)",boolean
CountDownLatch,countDown(),void
CountDownLatch,getCount(),long
CountDownLatch,toString(),String
CountedCompleter,addToPendingCount(int delta),void
CountedCompleter,"compareAndSetPendingCount(int expected, int count)",boolean
CountedCompleter,complete(T rawResult),void
CountedCompleter,compute(),abstract void
CountedCompleter,decrementPendingCountUnlessZero(),int
CountedCompleter,exec(),protected boolean
CountedCompleter,firstComplete(),CountedCompleter<?>
CountedCompleter,getCompleter(),CountedCompleter<?>
CountedCompleter,getPendingCount(),int
CountedCompleter,getRawResult(),T
CountedCompleter,getRoot(),CountedCompleter<?>
CountedCompleter,helpComplete(int maxTasks),void
CountedCompleter,nextComplete(),CountedCompleter<?>
CountedCompleter,onCompletion(CountedCompleter<?> caller),void
CountedCompleter,"onExceptionalCompletion(Throwable ex, CountedCompleter<?> caller)",boolean
CountedCompleter,propagateCompletion(),void
CountedCompleter,quietlyCompleteRoot(),void
CountedCompleter,setPendingCount(int count),void
CountedCompleter,setRawResult(T t),protected void
CountedCompleter,tryComplete(),void
CyclicBarrier,await(),int
CyclicBarrier,"await(long timeout, TimeUnit unit)",int
CyclicBarrier,getNumberWaiting(),int
CyclicBarrier,getParties(),int
CyclicBarrier,isBroken(),boolean
CyclicBarrier,reset(),void
DelayQueue,add(E e),boolean
DelayQueue,clear(),void
DelayQueue,drainTo(Collection<? super E> c),int
DelayQueue,"drainTo(Collection<? super E> c, int maxElements)",int
DelayQueue,iterator(),Iterator<E>
DelayQueue,offer(E e),boolean
DelayQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
DelayQueue,peek(),E
DelayQueue,poll(),E
DelayQueue,"poll(long timeout, TimeUnit unit)",E
DelayQueue,put(E e),void
DelayQueue,remainingCapacity(),int
DelayQueue,remove(Object o),boolean
DelayQueue,size(),int
DelayQueue,take(),E
DelayQueue,toArray(),Object[]
DelayQueue,toArray(T[] a),<T> T[]
Exchanger,exchange(V x),V
Exchanger,"exchange(V x, long timeout, TimeUnit unit)",V
ExecutorCompletionService,poll(),Future<V>
ExecutorCompletionService,"poll(long timeout, TimeUnit unit)",Future<V>
ExecutorCompletionService,submit(Callable<V> task),Future<V>
ExecutorCompletionService,"submit(Runnable task, V result)",Future<V>
ExecutorCompletionService,take(),Future<V>
Executors,callable(PrivilegedAction<?> action),static Callable<Object>
Executors,callable(PrivilegedExceptionAction<?> action),static Callable<Object>
Executors,callable(Runnable task),static Callable<Object>
Executors,"callable(Runnable task, T result)",static <T> Callable<T>
Executors,defaultThreadFactory(),static ThreadFactory
Executors,newCachedThreadPool(),static ExecutorService
Executors,newCachedThreadPool(ThreadFactory threadFactory),static ExecutorService
Executors,newFixedThreadPool(int nThreads),static ExecutorService
Executors,"newFixedThreadPool(int nThreads, ThreadFactory threadFactory)",static ExecutorService
Executors,newScheduledThreadPool(int corePoolSize),static ScheduledExecutorService
Executors,"newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)",static ScheduledExecutorService
Executors,newSingleThreadExecutor(),static ExecutorService
Executors,newSingleThreadExecutor(ThreadFactory threadFactory),static ExecutorService
Executors,newSingleThreadScheduledExecutor(),static ScheduledExecutorService
Executors,newSingleThreadScheduledExecutor(ThreadFactory threadFactory),static ScheduledExecutorService
Executors,newWorkStealingPool(),static ExecutorService
Executors,newWorkStealingPool(int parallelism),static ExecutorService
Executors,privilegedCallable(Callable<T> callable),static <T> Callable<T>
Executors,privilegedCallableUsingCurrentClassLoader(Callable<T> callable),static <T> Callable<T>
Executors,privilegedThreadFactory(),static ThreadFactory
Executors,unconfigurableExecutorService(ExecutorService executor),static ExecutorService
Executors,unconfigurableScheduledExecutorService(ScheduledExecutorService executor),static ScheduledExecutorService
ForkJoinPool,"awaitQuiescence(long timeout, TimeUnit unit)",boolean
ForkJoinPool,"awaitTermination(long timeout, TimeUnit unit)",boolean
ForkJoinPool,commonPool(),static ForkJoinPool
ForkJoinPool,drainTasksTo(Collection<? super ForkJoinTask<?>> c),protected int
ForkJoinPool,execute(ForkJoinTask<?> task),void
ForkJoinPool,execute(Runnable task),void
ForkJoinPool,getActiveThreadCount(),int
ForkJoinPool,getAsyncMode(),boolean
ForkJoinPool,getCommonPoolParallelism(),static int
ForkJoinPool,getFactory(),ForkJoinPool.ForkJoinWorkerThreadFactory
ForkJoinPool,getParallelism(),int
ForkJoinPool,getPoolSize(),int
ForkJoinPool,getQueuedSubmissionCount(),int
ForkJoinPool,getQueuedTaskCount(),long
ForkJoinPool,getRunningThreadCount(),int
ForkJoinPool,getStealCount(),long
ForkJoinPool,getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler
ForkJoinPool,hasQueuedSubmissions(),boolean
ForkJoinPool,invoke(ForkJoinTask<T> task),<T> T
ForkJoinPool,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>
ForkJoinPool,isQuiescent(),boolean
ForkJoinPool,isShutdown(),boolean
ForkJoinPool,isTerminated(),boolean
ForkJoinPool,isTerminating(),boolean
ForkJoinPool,managedBlock(ForkJoinPool.ManagedBlocker blocker),static void
ForkJoinPool,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>
ForkJoinPool,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>
ForkJoinPool,pollSubmission(),protected ForkJoinTask<?>
ForkJoinPool,shutdown(),void
ForkJoinPool,shutdownNow(),List<Runnable>
ForkJoinPool,submit(Callable<T> task),<T> ForkJoinTask<T>
ForkJoinPool,submit(ForkJoinTask<T> task),<T> ForkJoinTask<T>
ForkJoinPool,submit(Runnable task),ForkJoinTask<?>
ForkJoinPool,"submit(Runnable task, T result)",<T> ForkJoinTask<T>
ForkJoinPool,toString(),String
ForkJoinTask,adapt(Callable<? extends T> callable),static <T> ForkJoinTask<T>
ForkJoinTask,adapt(Runnable runnable),static ForkJoinTask<?>
ForkJoinTask,"adapt(Runnable runnable, T result)",static <T> ForkJoinTask<T>
ForkJoinTask,cancel(boolean mayInterruptIfRunning),boolean
ForkJoinTask,"compareAndSetForkJoinTaskTag(short e, short tag)",boolean
ForkJoinTask,complete(V value),void
ForkJoinTask,completeExceptionally(Throwable ex),void
ForkJoinTask,exec(),protected abstract boolean
ForkJoinTask,fork(),ForkJoinTask<V>
ForkJoinTask,get(),V
ForkJoinTask,"get(long timeout, TimeUnit unit)",V
ForkJoinTask,getException(),Throwable
ForkJoinTask,getForkJoinTaskTag(),short
ForkJoinTask,getPool(),static ForkJoinPool
ForkJoinTask,getQueuedTaskCount(),static int
ForkJoinTask,getRawResult(),abstract V
ForkJoinTask,getSurplusQueuedTaskCount(),static int
ForkJoinTask,helpQuiesce(),static void
ForkJoinTask,inForkJoinPool(),static boolean
ForkJoinTask,invoke(),V
ForkJoinTask,invokeAll(Collection<T> tasks),static <T extends ForkJoinTask<?>>Collection<T>
ForkJoinTask,invokeAll(ForkJoinTask<?>... tasks),static void
ForkJoinTask,"invokeAll(ForkJoinTask<?> t1, ForkJoinTask<?> t2)",static void
ForkJoinTask,isCancelled(),boolean
ForkJoinTask,isCompletedAbnormally(),boolean
ForkJoinTask,isCompletedNormally(),boolean
ForkJoinTask,isDone(),boolean
ForkJoinTask,join(),V
ForkJoinTask,peekNextLocalTask(),protected static ForkJoinTask<?>
ForkJoinTask,pollNextLocalTask(),protected static ForkJoinTask<?>
ForkJoinTask,pollTask(),protected static ForkJoinTask<?>
ForkJoinTask,quietlyComplete(),void
ForkJoinTask,quietlyInvoke(),void
ForkJoinTask,quietlyJoin(),void
ForkJoinTask,reinitialize(),void
ForkJoinTask,setForkJoinTaskTag(short tag),short
ForkJoinTask,setRawResult(V value),protected abstract void
ForkJoinTask,tryUnfork(),boolean
ForkJoinWorkerThread,getPool(),ForkJoinPool
ForkJoinWorkerThread,getPoolIndex(),int
ForkJoinWorkerThread,onStart(),protected void
ForkJoinWorkerThread,onTermination(Throwable exception),protected void
ForkJoinWorkerThread,run(),void
FutureTask,cancel(boolean mayInterruptIfRunning),boolean
FutureTask,done(),protected void
FutureTask,get(),V
FutureTask,"get(long timeout, TimeUnit unit)",V
FutureTask,isCancelled(),boolean
FutureTask,isDone(),boolean
FutureTask,run(),void
FutureTask,runAndReset(),protected boolean
FutureTask,set(V v),protected void
FutureTask,setException(Throwable t),protected void
LinkedBlockingDeque,add(E e),boolean
LinkedBlockingDeque,addFirst(E e),void
LinkedBlockingDeque,addLast(E e),void
LinkedBlockingDeque,clear(),void
LinkedBlockingDeque,contains(Object o),boolean
LinkedBlockingDeque,descendingIterator(),Iterator<E>
LinkedBlockingDeque,drainTo(Collection<? super E> c),int
LinkedBlockingDeque,"drainTo(Collection<? super E> c, int maxElements)",int
LinkedBlockingDeque,element(),E
LinkedBlockingDeque,getFirst(),E
LinkedBlockingDeque,getLast(),E
LinkedBlockingDeque,iterator(),Iterator<E>
LinkedBlockingDeque,offer(E e),boolean
LinkedBlockingDeque,"offer(E e, long timeout, TimeUnit unit)",boolean
LinkedBlockingDeque,offerFirst(E e),boolean
LinkedBlockingDeque,"offerFirst(E e, long timeout, TimeUnit unit)",boolean
LinkedBlockingDeque,offerLast(E e),boolean
LinkedBlockingDeque,"offerLast(E e, long timeout, TimeUnit unit)",boolean
LinkedBlockingDeque,peek(),E
LinkedBlockingDeque,peekFirst(),E
LinkedBlockingDeque,peekLast(),E
LinkedBlockingDeque,poll(),E
LinkedBlockingDeque,"poll(long timeout, TimeUnit unit)",E
LinkedBlockingDeque,pollFirst(),E
LinkedBlockingDeque,"pollFirst(long timeout, TimeUnit unit)",E
LinkedBlockingDeque,pollLast(),E
LinkedBlockingDeque,"pollLast(long timeout, TimeUnit unit)",E
LinkedBlockingDeque,pop(),E
LinkedBlockingDeque,push(E e),void
LinkedBlockingDeque,put(E e),void
LinkedBlockingDeque,putFirst(E e),void
LinkedBlockingDeque,putLast(E e),void
LinkedBlockingDeque,remainingCapacity(),int
LinkedBlockingDeque,remove(),E
LinkedBlockingDeque,remove(Object o),boolean
LinkedBlockingDeque,removeFirst(),E
LinkedBlockingDeque,removeFirstOccurrence(Object o),boolean
LinkedBlockingDeque,removeLast(),E
LinkedBlockingDeque,removeLastOccurrence(Object o),boolean
LinkedBlockingDeque,size(),int
LinkedBlockingDeque,spliterator(),Spliterator<E>
LinkedBlockingDeque,take(),E
LinkedBlockingDeque,takeFirst(),E
LinkedBlockingDeque,takeLast(),E
LinkedBlockingDeque,toArray(),Object[]
LinkedBlockingDeque,toArray(T[] a),<T> T[]
LinkedBlockingDeque,toString(),String
LinkedBlockingQueue,clear(),void
LinkedBlockingQueue,contains(Object o),boolean
LinkedBlockingQueue,drainTo(Collection<? super E> c),int
LinkedBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int
LinkedBlockingQueue,iterator(),Iterator<E>
LinkedBlockingQueue,offer(E e),boolean
LinkedBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
LinkedBlockingQueue,peek(),E
LinkedBlockingQueue,poll(),E
LinkedBlockingQueue,"poll(long timeout, TimeUnit unit)",E
LinkedBlockingQueue,put(E e),void
LinkedBlockingQueue,remainingCapacity(),int
LinkedBlockingQueue,remove(Object o),boolean
LinkedBlockingQueue,size(),int
LinkedBlockingQueue,spliterator(),Spliterator<E>
LinkedBlockingQueue,take(),E
LinkedBlockingQueue,toArray(),Object[]
LinkedBlockingQueue,toArray(T[] a),<T> T[]
LinkedBlockingQueue,toString(),String
LinkedTransferQueue,add(E e),boolean
LinkedTransferQueue,contains(Object o),boolean
LinkedTransferQueue,drainTo(Collection<? super E> c),int
LinkedTransferQueue,"drainTo(Collection<? super E> c, int maxElements)",int
LinkedTransferQueue,getWaitingConsumerCount(),int
LinkedTransferQueue,hasWaitingConsumer(),boolean
LinkedTransferQueue,isEmpty(),boolean
LinkedTransferQueue,iterator(),Iterator<E>
LinkedTransferQueue,offer(E e),boolean
LinkedTransferQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
LinkedTransferQueue,peek(),E
LinkedTransferQueue,poll(),E
LinkedTransferQueue,"poll(long timeout, TimeUnit unit)",E
LinkedTransferQueue,put(E e),void
LinkedTransferQueue,remainingCapacity(),int
LinkedTransferQueue,remove(Object o),boolean
LinkedTransferQueue,size(),int
LinkedTransferQueue,spliterator(),Spliterator<E>
LinkedTransferQueue,take(),E
LinkedTransferQueue,transfer(E e),void
LinkedTransferQueue,tryTransfer(E e),boolean
LinkedTransferQueue,"tryTransfer(E e, long timeout, TimeUnit unit)",boolean
Phaser,arrive(),int
Phaser,arriveAndAwaitAdvance(),int
Phaser,arriveAndDeregister(),int
Phaser,awaitAdvance(int phase),int
Phaser,awaitAdvanceInterruptibly(int phase),int
Phaser,"awaitAdvanceInterruptibly(int phase, long timeout, TimeUnit unit)",int
Phaser,bulkRegister(int parties),int
Phaser,forceTermination(),void
Phaser,getArrivedParties(),int
Phaser,getParent(),Phaser
Phaser,getPhase(),int
Phaser,getRegisteredParties(),int
Phaser,getRoot(),Phaser
Phaser,getUnarrivedParties(),int
Phaser,isTerminated(),boolean
Phaser,"onAdvance(int phase, int registeredParties)",protected boolean
Phaser,register(),int
Phaser,toString(),String
PriorityBlockingQueue,add(E e),boolean
PriorityBlockingQueue,clear(),void
PriorityBlockingQueue,comparator(),Comparator<? super E>
PriorityBlockingQueue,contains(Object o),boolean
PriorityBlockingQueue,drainTo(Collection<? super E> c),int
PriorityBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int
PriorityBlockingQueue,iterator(),Iterator<E>
PriorityBlockingQueue,offer(E e),boolean
PriorityBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
PriorityBlockingQueue,peek(),E
PriorityBlockingQueue,poll(),E
PriorityBlockingQueue,"poll(long timeout, TimeUnit unit)",E
PriorityBlockingQueue,put(E e),void
PriorityBlockingQueue,remainingCapacity(),int
PriorityBlockingQueue,remove(Object o),boolean
PriorityBlockingQueue,size(),int
PriorityBlockingQueue,spliterator(),Spliterator<E>
PriorityBlockingQueue,take(),E
PriorityBlockingQueue,toArray(),Object[]
PriorityBlockingQueue,toArray(T[] a),<T> T[]
PriorityBlockingQueue,toString(),String
RecursiveAction,compute(),protected abstract void
RecursiveAction,exec(),protected boolean
RecursiveAction,getRawResult(),Void
RecursiveAction,setRawResult(Void mustBeNull),protected void
RecursiveTask,compute(),protected abstract V
RecursiveTask,exec(),protected boolean
RecursiveTask,getRawResult(),V
RecursiveTask,setRawResult(V value),protected void
ScheduledThreadPoolExecutor,"decorateTask(Callable<V> callable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>
ScheduledThreadPoolExecutor,"decorateTask(Runnable runnable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>
ScheduledThreadPoolExecutor,execute(Runnable command),void
ScheduledThreadPoolExecutor,getContinueExistingPeriodicTasksAfterShutdownPolicy(),boolean
ScheduledThreadPoolExecutor,getExecuteExistingDelayedTasksAfterShutdownPolicy(),boolean
ScheduledThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>
ScheduledThreadPoolExecutor,getRemoveOnCancelPolicy(),boolean
ScheduledThreadPoolExecutor,"schedule(Callable<V> callable, long delay, TimeUnit unit)",<V> ScheduledFuture<V>
ScheduledThreadPoolExecutor,"schedule(Runnable command, long delay, TimeUnit unit)",ScheduledFuture<?>
ScheduledThreadPoolExecutor,"scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",ScheduledFuture<?>
ScheduledThreadPoolExecutor,"scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",ScheduledFuture<?>
ScheduledThreadPoolExecutor,setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value),void
ScheduledThreadPoolExecutor,setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value),void
ScheduledThreadPoolExecutor,setRemoveOnCancelPolicy(boolean value),void
ScheduledThreadPoolExecutor,shutdown(),void
ScheduledThreadPoolExecutor,shutdownNow(),List<Runnable>
ScheduledThreadPoolExecutor,submit(Callable<T> task),<T> Future<T>
ScheduledThreadPoolExecutor,submit(Runnable task),Future<?>
ScheduledThreadPoolExecutor,"submit(Runnable task, T result)",<T> Future<T>
Semaphore,acquire(),void
Semaphore,acquire(int permits),void
Semaphore,acquireUninterruptibly(),void
Semaphore,acquireUninterruptibly(int permits),void
Semaphore,availablePermits(),int
Semaphore,drainPermits(),int
Semaphore,getQueuedThreads(),protected Collection<Thread>
Semaphore,getQueueLength(),int
Semaphore,hasQueuedThreads(),boolean
Semaphore,isFair(),boolean
Semaphore,reducePermits(int reduction),protected void
Semaphore,release(),void
Semaphore,release(int permits),void
Semaphore,toString(),String
Semaphore,tryAcquire(),boolean
Semaphore,tryAcquire(int permits),boolean
Semaphore,"tryAcquire(int permits, long timeout, TimeUnit unit)",boolean
Semaphore,"tryAcquire(long timeout, TimeUnit unit)",boolean
SynchronousQueue,clear(),void
SynchronousQueue,contains(Object o),boolean
SynchronousQueue,containsAll(Collection<?> c),boolean
SynchronousQueue,drainTo(Collection<? super E> c),int
SynchronousQueue,"drainTo(Collection<? super E> c, int maxElements)",int
SynchronousQueue,isEmpty(),boolean
SynchronousQueue,iterator(),Iterator<E>
SynchronousQueue,offer(E e),boolean
SynchronousQueue,"offer(E e, long timeout, TimeUnit unit)",boolean
SynchronousQueue,peek(),E
SynchronousQueue,poll(),E
SynchronousQueue,"poll(long timeout, TimeUnit unit)",E
SynchronousQueue,put(E e),void
SynchronousQueue,remainingCapacity(),int
SynchronousQueue,remove(Object o),boolean
SynchronousQueue,removeAll(Collection<?> c),boolean
SynchronousQueue,retainAll(Collection<?> c),boolean
SynchronousQueue,size(),int
SynchronousQueue,spliterator(),Spliterator<E>
SynchronousQueue,take(),E
SynchronousQueue,toArray(),Object[]
SynchronousQueue,toArray(T[] a),<T> T[]
ThreadLocalRandom,current(),static ThreadLocalRandom
ThreadLocalRandom,doubles(),DoubleStream
ThreadLocalRandom,"doubles(double randomNumberOrigin, double randomNumberBound)",DoubleStream
ThreadLocalRandom,doubles(long streamSize),DoubleStream
ThreadLocalRandom,"doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",DoubleStream
ThreadLocalRandom,ints(),IntStream
ThreadLocalRandom,"ints(int randomNumberOrigin, int randomNumberBound)",IntStream
ThreadLocalRandom,ints(long streamSize),IntStream
ThreadLocalRandom,"ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",IntStream
ThreadLocalRandom,longs(),LongStream
ThreadLocalRandom,longs(long streamSize),LongStream
ThreadLocalRandom,"longs(long randomNumberOrigin, long randomNumberBound)",LongStream
ThreadLocalRandom,"longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",LongStream
ThreadLocalRandom,next(int bits),protected int
ThreadLocalRandom,nextBoolean(),boolean
ThreadLocalRandom,nextDouble(),double
ThreadLocalRandom,nextDouble(double bound),double
ThreadLocalRandom,"nextDouble(double origin, double bound)",double
ThreadLocalRandom,nextFloat(),float
ThreadLocalRandom,nextGaussian(),double
ThreadLocalRandom,nextInt(),int
ThreadLocalRandom,nextInt(int bound),int
ThreadLocalRandom,"nextInt(int origin, int bound)",int
ThreadLocalRandom,nextLong(),long
ThreadLocalRandom,nextLong(long bound),long
ThreadLocalRandom,"nextLong(long origin, long bound)",long
ThreadLocalRandom,setSeed(long seed),void
ThreadPoolExecutor,"afterExecute(Runnable r, Throwable t)",protected void
ThreadPoolExecutor,allowCoreThreadTimeOut(boolean value),void
ThreadPoolExecutor,allowsCoreThreadTimeOut(),boolean
ThreadPoolExecutor,"awaitTermination(long timeout, TimeUnit unit)",boolean
ThreadPoolExecutor,"beforeExecute(Thread t, Runnable r)",protected void
ThreadPoolExecutor,execute(Runnable command),void
ThreadPoolExecutor,finalize(),protected void
ThreadPoolExecutor,getActiveCount(),int
ThreadPoolExecutor,getCompletedTaskCount(),long
ThreadPoolExecutor,getCorePoolSize(),int
ThreadPoolExecutor,getKeepAliveTime(TimeUnit unit),long
ThreadPoolExecutor,getLargestPoolSize(),int
ThreadPoolExecutor,getMaximumPoolSize(),int
ThreadPoolExecutor,getPoolSize(),int
ThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>
ThreadPoolExecutor,getRejectedExecutionHandler(),RejectedExecutionHandler
ThreadPoolExecutor,getTaskCount(),long
ThreadPoolExecutor,getThreadFactory(),ThreadFactory
ThreadPoolExecutor,isShutdown(),boolean
ThreadPoolExecutor,isTerminated(),boolean
ThreadPoolExecutor,isTerminating(),boolean
ThreadPoolExecutor,prestartAllCoreThreads(),int
ThreadPoolExecutor,prestartCoreThread(),boolean
ThreadPoolExecutor,purge(),void
ThreadPoolExecutor,remove(Runnable task),boolean
ThreadPoolExecutor,setCorePoolSize(int corePoolSize),void
ThreadPoolExecutor,"setKeepAliveTime(long time, TimeUnit unit)",void
ThreadPoolExecutor,setMaximumPoolSize(int maximumPoolSize),void
ThreadPoolExecutor,setRejectedExecutionHandler(RejectedExecutionHandler handler),void
ThreadPoolExecutor,setThreadFactory(ThreadFactory threadFactory),void
ThreadPoolExecutor,shutdown(),void
ThreadPoolExecutor,shutdownNow(),List<Runnable>
ThreadPoolExecutor,terminated(),protected void
ThreadPoolExecutor,toString(),String
ThreadPoolExecutor.AbortPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void
ThreadPoolExecutor.CallerRunsPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void
ThreadPoolExecutor.DiscardOldestPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void
ThreadPoolExecutor.DiscardPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void
