Sample: 0 InputContext
----------------------------------------------------------------

@@ Instruction
I want to use java.awt.im.InputContext package from Java
recommend a list of useful with at most 5 apis for this package, exlclude method inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 1 InputMethodHighlight
----------------------------------------------------------------

@@ Instruction
I want to use java.awt.im.InputMethodHighlight package from Java
recommend a list of useful with at most 5 apis for this package, exlclude method inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 2 InputSubset
----------------------------------------------------------------

@@ Instruction
I want to use java.awt.im.InputSubset package from Java
recommend a list of useful with at most 5 apis for this package, exlclude method inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
3. `void clear()`: This method removes all of the elements from this list.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.

Note: The methods `remove(int index)`, `remove(Object o)`, `removeAll(Collection<?> c)`, `retainAll(Collection<?> c)`, `set(int index, E element)`, `subList(int fromIndex, int toIndex)`, `toArray()`, `toArray(T[] a)`, `equals(Object o)`, `hashCode()`, `toString()`, `listIterator()`, `listIterator(int index)`, `lastIndexOf(Object o)`, `removeRange(int fromIndex, int toIndex)`, `subList(int fromIndex, int toIndex)`, `clone()`, `sort(Comparator<? super E> c)`, `spliterator()`, `stream()`, `parallelStream()`, `forEach(Consumer<? super E> action)`, `replaceAll(UnaryOperator<E> operator)`, `replaceAll(Predicate<? super E> filter, Function<? super E,? extends E> replacer)`, `removeIf(Predicate<? super E> filter)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super E> action)`, `forEach(Consumer<? super
================================================================

