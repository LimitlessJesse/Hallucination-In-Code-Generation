Sample: Arc2D_2
----------------------------------------------------------------
stdout:
Arc2D: java.awt.geom.Arc2D$Double@1f020000

================================================================

Sample: Arc2D_3
----------------------------------------------------------------
stdout:
true

================================================================

Sample: Arc2D_5
----------------------------------------------------------------
stdout:
Does the rectangle intersect with the arc? true

================================================================

Sample: Arc2D_Double_2
----------------------------------------------------------------
stdout:
X-coordinate of the center of the arc: 10.0

================================================================

Sample: Arc2D_Double_3
----------------------------------------------------------------
stdout:
Y-coordinate of the center of the arc: 0.0

================================================================

Sample: Arc2D_Double_4
----------------------------------------------------------------
stdout:
Width of the arc: 100.0

================================================================

Sample: Arc2D_Double_5
----------------------------------------------------------------
stdout:
Height of the arc: 100.0

================================================================

Sample: Arc2D_Float_17
----------------------------------------------------------------
stdout:
true

================================================================

Sample: Area_2
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: Area_3
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: Area_4
----------------------------------------------------------------
stdout:
true

================================================================

Sample: CubicCurve2D_2
----------------------------------------------------------------
stdout:
X-coordinate of the first control point: 10.0

================================================================

Sample: CubicCurve2D_3
----------------------------------------------------------------
stdout:
Y-coordinate of the first control point: 10.0

================================================================

Sample: CubicCurve2D_4
----------------------------------------------------------------
stdout:
The x-coordinate of the second control point is: 20.0

================================================================

Sample: CubicCurve2D_5
----------------------------------------------------------------
stdout:
Y-coordinate of the second control point: 0.0

================================================================

Sample: CubicCurve2D_6
----------------------------------------------------------------
stdout:
X-coordinate of the first control point: 10.0

================================================================

Sample: CubicCurve2D_7
----------------------------------------------------------------
stdout:
Y-coordinate of the first control point: 0.0

================================================================

Sample: CubicCurve2D_8
----------------------------------------------------------------
stdout:
X2: 40.0

================================================================

Sample: CubicCurve2D_9
----------------------------------------------------------------
stdout:
Y2: 40.0

================================================================

Sample: CubicCurve2D_Double_2
----------------------------------------------------------------
stdout:
X-coordinate of the first control point: 20.0

================================================================

Sample: CubicCurve2D_Double_3
----------------------------------------------------------------
stdout:
Y-coordinate of the first control point: 20.0

================================================================

Sample: CubicCurve2D_Double_4
----------------------------------------------------------------
stdout:
The x-coordinate of the second control point is: 30.0

================================================================

Sample: CubicCurve2D_Double_5
----------------------------------------------------------------
stdout:
Y-coordinate of the second control point: 30.0

================================================================

Sample: CubicCurve2D_Double_6
----------------------------------------------------------------
stdout:
X-coordinate of the first control point: 10.0

================================================================

Sample: CubicCurve2D_Double_7
----------------------------------------------------------------
stdout:
Y1: 10.0

================================================================

Sample: CubicCurve2D_Double_8
----------------------------------------------------------------
stdout:
X2: 7.0

================================================================

Sample: CubicCurve2D_Double_9
----------------------------------------------------------------
stdout:
Y2: 40.0

================================================================

Sample: CubicCurve2D_Double_10
----------------------------------------------------------------
================================================================

Sample: CubicCurve2D_Float_10
----------------------------------------------------------------
================================================================

Sample: Dimension2D_1
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/Dimension2D_1.java:6: error: incompatible types: Double cannot be converted to Dimension2D
        Dimension2D dimension = new Rectangle2D.Double(10, 20, 30, 40);
                                ^
1 error


================================================================

Sample: Dimension2D_2
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/Dimension2D_2.java:6: error: incompatible types: Double cannot be converted to Dimension2D
        Dimension2D dimension = new Rectangle2D.Double(10, 20, 30, 40);
                                ^
1 error


================================================================

Sample: Ellipse2D_3
----------------------------------------------------------------
stdout:
Is point (7.0, 7.0) inside the ellipse? true

================================================================

Sample: Ellipse2D_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: FlatteningPathIterator_2
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/FlatteningPathIterator_2.java:11: error: no suitable constructor found for FlatteningPathIterator(PathIterator)
        FlatteningPathIterator iterator = new FlatteningPathIterator(path.getPathIterator(null));
                                          ^
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double) is not applicable
      (actual and formal argument lists differ in length)
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: FlatteningPathIterator_3
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/FlatteningPathIterator_3.java:7: error: no suitable constructor found for FlatteningPathIterator(PathIterator)
        FlatteningPathIterator iterator = new FlatteningPathIterator(shape.getPathIterator(null));
                                          ^
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double) is not applicable
      (actual and formal argument lists differ in length)
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: FlatteningPathIterator_4
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/FlatteningPathIterator_4.java:12: error: no suitable constructor found for FlatteningPathIterator(PathIterator)
        FlatteningPathIterator iterator = new FlatteningPathIterator(path.getPathIterator(null));
                                          ^
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double) is not applicable
      (actual and formal argument lists differ in length)
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: FlatteningPathIterator_5
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/FlatteningPathIterator_5.java:9: error: no suitable constructor found for FlatteningPathIterator(PathIterator)
        FlatteningPathIterator iterator = new FlatteningPathIterator(path.getPathIterator(null));
                                          ^
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double) is not applicable
      (actual and formal argument lists differ in length)
    constructor FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: Line2D_3
----------------------------------------------------------------
stdout:
X-coordinate of the first endpoint: 1.0

================================================================

Sample: Line2D_4
----------------------------------------------------------------
stdout:
Y-coordinate of the first endpoint: 2.0

================================================================

Sample: Line2D_5
----------------------------------------------------------------
stdout:
X2: 3.0

================================================================

Sample: Line2D_6
----------------------------------------------------------------
stdout:
Y2: 4.0

================================================================

Sample: Line2D_Double_1
----------------------------------------------------------------
stdout:
X-coordinate of the first endpoint: 1.0

================================================================

Sample: Line2D_Double_2
----------------------------------------------------------------
stdout:
Y-coordinate of the first endpoint of the line: 2.0

================================================================

Sample: Line2D_Double_3
----------------------------------------------------------------
stdout:
The x-coordinate of the second endpoint is: 3.0

================================================================

Sample: Line2D_Double_4
----------------------------------------------------------------
stdout:
Y2: 4.0

================================================================

Sample: Line2D_Double_5
----------------------------------------------------------------
stdout:
Line: java.awt.geom.Line2D$Double@fcd6521

================================================================

Sample: Path2D_Double_12
----------------------------------------------------------------
stdout:
Original Path: java.awt.geom.Path2D$Double@4516af24
Cloned Path: java.awt.geom.Path2D$Double@4ae82894

================================================================

Sample: Point2D_1
----------------------------------------------------------------
stdout:
The distance between the points (1.0, 2.0) and (4.0, 6.0) is 5.0

================================================================

Sample: Point2D_3
----------------------------------------------------------------
stdout:
The distance between the points (1.0, 2.0) and (4.0, 6.0) is: 25.0

================================================================

Sample: Point2D_5
----------------------------------------------------------------
stdout:
X-coordinate: 5.0

================================================================

Sample: Point2D_6
----------------------------------------------------------------
stdout:
Y-coordinate of the point is: 4.0

================================================================

Sample: Point2D_7
----------------------------------------------------------------
stdout:
X: 3.0, Y: 4.0

================================================================

Sample: Point2D_8
----------------------------------------------------------------
stdout:
X: 10.0, Y: 20.0

================================================================

Sample: Point2D_9
----------------------------------------------------------------
stdout:
X: 3.0, Y: 4.0

================================================================

Sample: Point2D_10
----------------------------------------------------------------
stdout:
X: 10.0, Y: 20.0

================================================================

Sample: Point2D_Double_1
----------------------------------------------------------------
stdout:
The x-coordinate of the point is: 3.0

================================================================

Sample: Point2D_Double_2
----------------------------------------------------------------
stdout:
Y-coordinate of the point is: 4.0

================================================================

Sample: Point2D_Double_3
----------------------------------------------------------------
stdout:
X: 3.0, Y: 4.0

================================================================

Sample: Point2D_Float_3
----------------------------------------------------------------
stdout:
X: 5.0, Y: 10.0

================================================================

Sample: QuadCurve2D_1
----------------------------------------------------------------
================================================================

Sample: QuadCurve2D_2
----------------------------------------------------------------
stdout:
Control Point X: 10.0

================================================================

Sample: QuadCurve2D_3
----------------------------------------------------------------
stdout:
Y-coordinate of the control point: 10.0

================================================================

Sample: QuadCurve2D_4
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/QuadCurve2D_4.java:6: error: cannot find symbol
        double x1 = quadCurve.getCtrlX1();
                             ^
  symbol:   method getCtrlX1()
  location: variable quadCurve of type QuadCurve2D
1 error


================================================================

Sample: QuadCurve2D_5
----------------------------------------------------------------
stdout:
Y1: 10.0

================================================================

Sample: QuadCurve2D_6
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/QuadCurve2D_6.java:6: error: cannot find symbol
        double x2 = quadCurve.getCtrlX2();
                             ^
  symbol:   method getCtrlX2()
  location: variable quadCurve of type QuadCurve2D
1 error


================================================================

Sample: QuadCurve2D_7
----------------------------------------------------------------
stdout:
Y2: 20.0

================================================================

Sample: QuadCurve2D_Double_1
----------------------------------------------------------------
================================================================

Sample: QuadCurve2D_Double_3
----------------------------------------------------------------
stdout:
X-coordinate of the control point: 10.0

================================================================

Sample: QuadCurve2D_Double_4
----------------------------------------------------------------
stdout:
Y1: 10.0

================================================================

Sample: QuadCurve2D_Double_5
----------------------------------------------------------------
stdout:
X2: 20.0

================================================================

Sample: QuadCurve2D_Double_6
----------------------------------------------------------------
stdout:
Y2: 6.0

================================================================

Sample: QuadCurve2D_Float_1
----------------------------------------------------------------
================================================================

Sample: QuadCurve2D_Float_3
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/QuadCurve2D_Float_3.java:6: error: cannot find symbol
        float x1 = curve.getCtrlX1();
                        ^
  symbol:   method getCtrlX1()
  location: variable curve of type Float
1 error


================================================================

Sample: QuadCurve2D_Float_4
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/QuadCurve2D_Float_4.java:6: error: incompatible types: possible lossy conversion from double to float
        float y1 = curve.getY1();
                              ^
1 error


================================================================

Sample: QuadCurve2D_Float_5
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/QuadCurve2D_Float_5.java:6: error: cannot find symbol
        float x2 = curve.getCtrlX2();
                        ^
  symbol:   method getCtrlX2()
  location: variable curve of type Float
1 error


================================================================

Sample: QuadCurve2D_Float_6
----------------------------------------------------------------
stdout:
Y2: 20.0

================================================================

Sample: Rectangle2D_7
----------------------------------------------------------------
stdout:
The point (30.0, 30.0) is contained in the rectangle.

================================================================

Sample: Rectangle2D_9
----------------------------------------------------------------
stdout:
Do the rectangles intersect? true

================================================================

Sample: Rectangle2D_11
----------------------------------------------------------------
stdout:
true

================================================================

Sample: Rectangle2D_13
----------------------------------------------------------------
stdout:
Does the rectangle intersect the line? true

================================================================

Sample: Rectangle2D_Double_3
----------------------------------------------------------------
stdout:
Height of the rectangle: 50.0

================================================================

Sample: Rectangle2D_Double_4
----------------------------------------------------------------
stdout:
Width of the rectangle: 30.0

================================================================

Sample: Rectangle2D_Double_5
----------------------------------------------------------------
stdout:
X coordinate of the rectangle: 10.0

================================================================

Sample: Rectangle2D_Double_6
----------------------------------------------------------------
stdout:
Y-coordinate of the upper-left corner of the rectangle: 20.0

================================================================

Sample: Rectangle2D_Double_11
----------------------------------------------------------------
stdout:
X: 10.0
Y: 20.0
Width: 30.0
Height: 40.0

================================================================

Sample: Rectangle2D_Double_12
----------------------------------------------------------------
stdout:
X: 10.0
Y: 10.0
Width: 50.0
Height: 50.0

================================================================

Sample: RectangularShape_3
----------------------------------------------------------------
output:
./java_awt_geom/javaFiles/RectangularShape_3.java:6: error: <anonymous RectangularShape_3$1> is not abstract and does not override abstract method getPathIterator(AffineTransform) in Shape
        RectangularShape shape = new RectangularShape() {
                                                        ^
./java_awt_geom/javaFiles/RectangularShape_3.java:13: error: getBounds() in <anonymous RectangularShape_3$1> cannot implement getBounds() in Shape
            public Rectangle2D getBounds() {
                               ^
  return type Rectangle2D is not compatible with Rectangle
./java_awt_geom/javaFiles/RectangularShape_3.java:12: error: method does not override or implement a method from a supertype
            @Override
            ^
./java_awt_geom/javaFiles/RectangularShape_3.java:17: error: method does not override or implement a method from a supertype
            @Override
            ^
4 errors


================================================================

Sample: RectangularShape_6
----------------------------------------------------------------
stdout:
Do the shapes intersect? true

================================================================

Sample: RoundRectangle2D_2
----------------------------------------------------------------
stdout:
Arc Width: 20.0

================================================================

Sample: RoundRectangle2D_3
----------------------------------------------------------------
stdout:
Arc Height: 20.0

================================================================

Sample: RoundRectangle2D_8
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: RoundRectangle2D_10
----------------------------------------------------------------
stdout:
Do the two rectangles intersect? true

================================================================

Sample: RoundRectangle2D_15
----------------------------------------------------------------
stdout:
false

================================================================

Sample: RoundRectangle2D_Double_2
----------------------------------------------------------------
stdout:
Arc Width: 10.0

================================================================

Sample: RoundRectangle2D_Double_3
----------------------------------------------------------------
stdout:
Arc Height: 10.0

================================================================

Sample: RoundRectangle2D_Double_4
----------------------------------------------------------------
stdout:
Height of the rectangle: 50.0

================================================================

Sample: RoundRectangle2D_Double_5
----------------------------------------------------------------
stdout:
Width of the rectangle: 50.0

================================================================

Sample: RoundRectangle2D_Double_6
----------------------------------------------------------------
stdout:
X-coordinate of the upper-left corner: 10.0

================================================================

Sample: RoundRectangle2D_Double_7
----------------------------------------------------------------
stdout:
Y-coordinate of the upper-left corner of the rectangle: 20.0

================================================================

Sample: RoundRectangle2D_Float_4
----------------------------------------------------------------
stdout:
java.awt.geom.RoundRectangle2D$Float@2ec20000

================================================================

